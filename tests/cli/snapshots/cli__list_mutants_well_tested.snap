---
source: tests/cli/main.rs
expression: "String::from_utf8_lossy(&output.stdout)"
---
src/arc.rs:4:5: replace return_arc -> Arc<String> with Arc::new(String::new())
src/arc.rs:4:5: replace return_arc -> Arc<String> with Arc::new("xyzzy".into())
src/inside_mod.rs:4:13: replace outer::inner::name -> &'static str with ""
src/inside_mod.rs:4:13: replace outer::inner::name -> &'static str with "xyzzy"
src/methods.rs:17:9: replace Foo::double with ()
src/methods.rs:23:9: replace <impl Display for Foo>::fmt -> fmt::Result with Ok(Default::default())
src/methods.rs:29:9: replace <impl Debug for &Foo>::fmt -> fmt::Result with Ok(Default::default())
src/nested_function.rs:2:5: replace has_nested -> u32 with 0
src/nested_function.rs:2:5: replace has_nested -> u32 with 1
src/nested_function.rs:3:9: replace has_nested::inner -> u32 with 0
src/nested_function.rs:3:9: replace has_nested::inner -> u32 with 1
src/numbers.rs:2:5: replace double_float -> f32 with 0.0
src/numbers.rs:2:5: replace double_float -> f32 with 1.0
src/numbers.rs:2:5: replace double_float -> f32 with -1.0
src/numbers.rs:6:5: replace is_double -> bool with true
src/numbers.rs:6:5: replace is_double -> bool with false
src/numbers.rs:6:7: replace == with != in is_double
src/result.rs:6:5: replace simple_result -> Result<&'static str, ()> with Ok("")
src/result.rs:6:5: replace simple_result -> Result<&'static str, ()> with Ok("xyzzy")
src/result.rs:10:5: replace error_if_negative -> Result<(), ()> with Ok(())
src/result.rs:18:5: replace result_with_no_apparent_type_args -> std::fmt::Result with Ok(Default::default())
src/sets.rs:4:5: replace make_a_set -> BTreeSet<String> with BTreeSet::new()
src/sets.rs:4:5: replace make_a_set -> BTreeSet<String> with BTreeSet::from_iter([String::new()])
src/sets.rs:4:5: replace make_a_set -> BTreeSet<String> with BTreeSet::from_iter(["xyzzy".into()])
src/simple_fns.rs:8:5: replace returns_unit with ()
src/simple_fns.rs:13:5: replace returns_42u32 -> u32 with 0
src/simple_fns.rs:13:5: replace returns_42u32 -> u32 with 1
src/simple_fns.rs:18:5: replace divisible_by_three -> bool with true
src/simple_fns.rs:18:5: replace divisible_by_three -> bool with false
src/simple_fns.rs:18:11: replace == with != in divisible_by_three
src/simple_fns.rs:27:5: replace double_string -> String with String::new()
src/simple_fns.rs:27:5: replace double_string -> String with "xyzzy".into()
src/slices.rs:4:5: replace pad -> &'a[Cow<'static, str>] with Vec::leak(Vec::new())
src/slices.rs:4:5: replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Borrowed("")])
src/slices.rs:4:5: replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Owned("".to_owned())])
src/slices.rs:4:5: replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Borrowed("xyzzy")])
src/slices.rs:4:5: replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Owned("xyzzy".to_owned())])
src/slices.rs:13:5: replace return_mut_slice -> &mut[usize] with Vec::leak(Vec::new())
src/slices.rs:13:5: replace return_mut_slice -> &mut[usize] with Vec::leak(vec![0])
src/slices.rs:13:5: replace return_mut_slice -> &mut[usize] with Vec::leak(vec![1])
src/static_item.rs:1:33: replace == with !=
src/struct_with_lifetime.rs:15:9: replace Lex<'buf>::buf_len -> usize with 0
src/struct_with_lifetime.rs:15:9: replace Lex<'buf>::buf_len -> usize with 1
src/traits.rs:5:9: replace Something::is_three -> bool with true
src/traits.rs:5:9: replace Something::is_three -> bool with false
src/traits.rs:5:11: replace == with != in Something::is_three

